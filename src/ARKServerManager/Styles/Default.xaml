<Globalization:StyleResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Globalization="clr-namespace:WPFSharp.Globalizer;assembly=WPFSharp.Globalizer" 
    xmlns:cc="clr-namespace:ServerManagerTool.Common.Converters;assembly=ServerManager.Common"
    xmlns:com="clr-namespace:ServerManagerTool.Common;assembly=ServerManager.Common"
    Name="Default">

    <BitmapImage x:Key="NoAvatar" UriSource="../Art/NoAvatar.png" />

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <cc:CommaDelimitedStringCountConverter x:Key="CommaDelimitedStringCountConverter"/>
    <cc:EnumConverter x:Key="EnumConverter"/>
    <cc:EnumFlagsConverter x:Key="EnumFlagsConverter"/>
    <cc:FloatToPercentageConverter x:Key="FloatToPercentageConverter"/>
    <cc:HasStringValueConverter x:Key="HasStringValueConverter"/>
    <cc:InstalledVersionConverter x:Key="InstalledVersionConverter"/>
    <cc:InvertBooleanConverter x:Key="InvertBooleanConverter"/>
    <cc:InvertBooleanToVisibilityConverter x:Key="InvertBooleanToVisibilityConverter"/>
    <cc:IsNullOrWhiteSpaceValueConverter x:Key="IsNullOrWhiteSpaceValueConverter"/>
    <cc:IsNullValueConverter x:Key="IsNullValueConverter"/>
    <cc:MinutesToTimeValueConverter x:Key="MinutesToTimeValueConverter"/>
    <cc:NullValueConverter x:Key="NullValueConverter"/>
    <cc:ProcessorAffinityConverter x:Key="ProcessorAffinityConverter"/>
    <cc:SecondsToHoursConverter x:Key="SecondsToHoursConverter"/>
    <cc:SecondsToMinutesConverter x:Key="SecondsToMinutesConverter"/>
    <cc:SecondsToTimeValueConverter x:Key="SecondsToTimeValueConverter"/>
    <cc:StringNullOrEmptyToVisibilityConverter x:Key="StringNullOrEmptyToVisibilityConverter"/>
    <cc:InvertStringNullOrEmptyToVisibilityConverter x:Key="InvertStringNullOrEmptyToVisibilityConverter"/>

    <SolidColorBrush x:Key="BeigeBorder" Color="#FFD8CCBC"/>
    <SolidColorBrush x:Key="BeigeLabel" Color="#FFE6DFD8"/>
    <SolidColorBrush x:Key="DarkBorder" Color="#FF10274F"/>
    <SolidColorBrush x:Key="HeaderBrush" Color="#FFF0F0F0"/>
    <SolidColorBrush x:Key="SolidBackground" Color="White" />
    <SolidColorBrush x:Key="WarningMessage" Color="Red"/>
    <SolidColorBrush x:Key="TabItem.Selected.Background" Color="#FFFFFF"/>
    <SolidColorBrush x:Key="TabItem.Selected.Border" Color="#ACACAC"/>
    <SolidColorBrush x:Key="UnSyncedSetting" Color="RoyalBlue"/>
    <SolidColorBrush x:Key="FoundSetting" Color="AliceBlue"/>

    <LinearGradientBrush x:Key="GradientBackground" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FFECE1D4" Offset="1"/>
        <GradientStop Color="#FFEAE8E6"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="BeigeGradient" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FFECE1D4" Offset="1"/>
        <GradientStop Color="#FFEAE8E6"/>
    </LinearGradientBrush>


    <!--Generic control styles-->
    <Style TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="Black" />
    </Style>

    <!--Named styles-->
    <Style x:Key="BorderLabel" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="BorderBrush" Value="#FFD8CCBC"/>
        <Setter Property="Background" Value="#FFE6DFD8"/>
    </Style>

    <Style x:Key="GroupBoxStyle" TargetType="GroupBox" BasedOn="{StaticResource {x:Type GroupBox}}">
        <Setter Property="BorderBrush" Value="{StaticResource BeigeBorder}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <Style x:Key="HiddenTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="Wheat"/>
        <Setter Property="IsReadOnly" Value="True"/>
    </Style>

    <Style x:Key="CenteredCheckboxStyle" TargetType="CheckBox">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="CenteredTextBlockStyle" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="BorderDarkStyle" TargetType="Border">
        <Setter Property="BorderBrush" Value="{StaticResource DarkBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="3"/>
        <Setter Property="Background" Value="{StaticResource BeigeLabel}"/>
    </Style>

    <Style x:Key="BorderLightStyle" TargetType="Border">
        <Setter Property="BorderBrush" Value="{StaticResource BeigeBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>

    <Style x:Key="BorderFillLightStyle" TargetType="Border">
        <Setter Property="Background" Value="{StaticResource BeigeLabel}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BeigeBorder}"/>
    </Style>

    <Style x:Key="GridSplitterBorderStyle" TargetType="GridSplitter">
        <Setter Property="BorderBrush" Value="{StaticResource BeigeBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>
    
    <Style x:Key="ButtonStyle1" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="#00ffffff"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Width" Value="22"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Padding" Value="0"/>
    </Style>
    
    <Style x:Key="ButtonStyle2" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Width" Value="22"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Padding" Value="0"/>
    </Style>
    
    <Style x:Key="ButtonStyle3" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="#00ffffff"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Padding" Value="0"/>
    </Style>

    <Style x:Key="ButtonStyle4" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="#00ffffff"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Padding" Value="0"/>
    </Style>

    <Style x:Key="ButtonStyle5" TargetType="Button" BasedOn="{StaticResource ButtonStyle1}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border CornerRadius="15" Background="{TemplateBinding Background}" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="Red"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    

    <Style x:Key="ServerStatus" TargetType="{x:Type Label}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding ServerRCON.Status}" Value="Connected">
                <Setter Property="Foreground" Value="Green"/>
                <Setter Property="FontWeight" Value="Bold"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ServerRCON.Status}" Value="Disconnected">
                <Setter Property="Foreground" Value="Red"/>
                <Setter Property="FontWeight" Value="Bold"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PlayerStatus" TargetType="Border">
        <Setter Property="BorderBrush" Value="Gray"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsOnline}"            Value="True">
                <Setter Property="BorderBrush" Value="LightGreen"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsOnline}"      Value="False" />
                    <Condition Binding="{Binding IsValid}"       Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="BorderBrush" Value="Orange"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsOnline}"      Value="False" />
                    <Condition Binding="{Binding IsWhitelisted}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="BorderBrush" Value="#0066CC"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="PlayerName" TargetType="Label">
        <Setter Property="Content" Value="{Binding PlayerName}"/>
        <Setter Property="ToolTip" Value="{Binding PlayerId}"/>
        <Setter Property="Background" Value="AliceBlue"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsAdmin}" Value="True">
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="Foreground" Value="#0066CC"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsAdmin}" Value="False">
                <Setter Property="FontStyle" Value="Normal"/>
                <Setter Property="Foreground" Value="Black"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="TribeName" TargetType="Label">
        <Style.Triggers>
            <DataTrigger Binding="{Binding TribeName, Converter={StaticResource IsNullOrWhiteSpaceValueConverter}}" Value="True">
                <Setter Property="Content" Value="No tribe"/>
                <Setter Property="FontStyle" Value="Italic"/>
                <Setter Property="Foreground" Value="LightGray"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TribeName, Converter={StaticResource IsNullOrWhiteSpaceValueConverter}}" Value="False">
                <Setter Property="Content" Value="{Binding PlayerData.Tribe.Name}"/>
                <Setter Property="FontStyle" Value="Normal"/>
                <Setter Property="Foreground" Value="Black"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    
    <Style x:Key="Online" TargetType="{x:Type Label}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Player.IsOnline}" Value="True">
                <Setter Property="Foreground" Value="Green"/>
                <Setter Property="FontWeight" Value="Bold"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Player.IsOnline}" Value="False">
                <Setter Property="Foreground" Value="Red"/>
                <Setter Property="FontWeight" Value="Bold"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="CommunityBanned" TargetType="{x:Type Label}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding PlayerData.CommunityBanned}" Value="False">
                <Setter Property="Foreground" Value="Black"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding PlayerData.CommunityBanned}" Value="True">
                <Setter Property="Foreground" Value="Red"/>
                <Setter Property="FontWeight" Value="Bold"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="VACBanned" TargetType="{x:Type Label}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding PlayerData.VACBanned}" Value="False">
                <Setter Property="Foreground" Value="Black"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding PlayerData.VACBanned}" Value="True">
                <Setter Property="Foreground" Value="Red"/>
                <Setter Property="FontWeight" Value="Bold"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="Banned" TargetType="{x:Type Label}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Player.IsBanned}" Value="False">
                <Setter Property="Foreground" Value="Black"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Player.IsBanned}" Value="True">
                <Setter Property="Foreground" Value="Red"/>
                <Setter Property="FontWeight" Value="Bold"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="Whitelisted" TargetType="{x:Type Label}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Player.IsWhitelisted}" Value="True">
                <Setter Property="Foreground" Value="Blue"/>
                <Setter Property="FontWeight" Value="Bold"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Player.IsWhitelisted}" Value="False">
                <Setter Property="Foreground" Value="Black"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    
    <Style x:Key="OnlineListViewItemStyle" TargetType="{x:Type ListViewItem}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsOnline}" Value="True">
                <Setter Property="Foreground" Value="Green"/>
                <Setter Property="FontWeight" Value="Bold"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="Version" TargetType="Label">
        <Setter Property="Content" Value="{Binding Title}"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="Foreground" Value="Black"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsCurrent}" Value="True">
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="Foreground" Value="#0066CC"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--AnnotatedSlider-->
    <SolidColorBrush x:Key="SliderThumb.Static.Foreground" Color="#FFE5E5E5"/>
    <SolidColorBrush x:Key="SliderThumb.MouseOver.Background" Color="#FFDCECFC"/>
    <SolidColorBrush x:Key="SliderThumb.MouseOver.Border" Color="#FF7Eb4EA"/>
    <SolidColorBrush x:Key="SliderThumb.Pressed.Background" Color="#FFDAECFC"/>
    <SolidColorBrush x:Key="SliderThumb.Pressed.Border" Color="#FF569DE5"/>
    <SolidColorBrush x:Key="SliderThumb.Disabled.Background" Color="#FFF0F0F0"/>
    <SolidColorBrush x:Key="SliderThumb.Disabled.Border" Color="#FFD9D9D9"/>
    <SolidColorBrush x:Key="SliderThumb.Static.Background" Color="#FFF0F0F0"/>
    <SolidColorBrush x:Key="SliderThumb.Static.Border" Color="#FFACACAC"/>
    <SolidColorBrush x:Key="SliderThumb.Track.Border" Color="#FFD6D6D6"/>
    <SolidColorBrush x:Key="SliderThumb.Track.BorderBackground" Color="#FFE7EAEA"/>
    <SolidColorBrush x:Key="SliderThumb.Grip.Fill" Color="#FFE6DFD8"/>
    <SolidColorBrush x:Key="SliderThumb.Tick.Bottom" Color="#FFD8CCBC"/>
    <SolidColorBrush x:Key="SliderThumb.Track.Background" Color="#FFBFA786"/>

    <!--Expander-->
    <SolidColorBrush x:Key="Expander.MouseOver.Circle.Stroke" Color="#FF5593FF"/>
    <SolidColorBrush x:Key="Expander.MouseOver.Circle.Fill" Color="#FFF3F9FF"/>
    <SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke" Color="#FF000000"/>
    <SolidColorBrush x:Key="Expander.Pressed.Circle.Stroke" Color="#FF3C77DD"/>
    <SolidColorBrush x:Key="Expander.Pressed.Circle.Fill" Color="#FFD9ECFF"/>
    <SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke" Color="#FF000000"/>
    <SolidColorBrush x:Key="Expander.Disabled.Circle.Stroke" Color="#FFBCBCBC"/>
    <SolidColorBrush x:Key="Expander.Disabled.Circle.Fill" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke" Color="#FF707070"/>
    <SolidColorBrush x:Key="Expander.Static.Circle.Fill" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="Expander.Static.Circle.Stroke" Color="#FF333333"/>
    <SolidColorBrush x:Key="Expander.Static.Arrow.Stroke" Color="#FF333333"/>

    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                            <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ExpanderStyle1" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=EnableSOTFCheckbox, Path=IsChecked}" Value="True">
                <Setter Property="Foreground" Value="DarkRed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=EnablePGMCheckbox, Path=IsChecked}" Value="True">
                <Setter Property="Foreground" Value="#4E008B"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="ExpanderHeaderTextStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="13.333"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>

    <ContentControl x:Key="ServerMonitorButtonContent">
        <StackPanel Orientation="Horizontal" Height="20" Margin="0,0,5,0">
            <Image Margin="5,1,5,0" Source="{com:Icon Path=/Ark Server Manager;component/Art/Servers.ico,Size=64}" Width="20" VerticalAlignment="Center"/>
            <Label Content="{DynamicResource ServerMonitor_Title}" VerticalAlignment="Center" Padding="0" FontWeight="Bold"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="SettingFindButtonContent">
        <StackPanel Orientation="Horizontal" Height="27">
            <Image Margin="5,0,5,0" Source="{com:Icon Path=/Ark Server Manager;component/Art/Find.ico,Size=32}" Width="16" VerticalAlignment="Center"/>
            <Label Content="{DynamicResource ServerSettings_SettingFindButtonLabel}" VerticalAlignment="Center"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="SupportZipButtonContent">
        <StackPanel Orientation="Horizontal" Height="27">
            <Image Margin="5,0,5,0" Source="{com:Icon Path=/Ark Server Manager;component/Art/Zip.ico,Size=32}" Width="16" VerticalAlignment="Center"/>
            <Label Content="{DynamicResource ServerSettings_SupportZipButtonLabel}" VerticalAlignment="Center"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="SyncProfileButtonContent">
        <StackPanel Orientation="Horizontal" Height="27">
            <Image Margin="5,0,5,0" Source="{com:Icon Path=/Ark Server Manager;component/Art/Copy.ico,Size=32}" Width="16" VerticalAlignment="Center"/>
            <Label Content="{DynamicResource ServerSettings_SyncProfileButtonLabel}" VerticalAlignment="Center"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="ImportButtonContent">
        <StackPanel Orientation="Horizontal" Height="27">
            <Image Margin="5,0,5,0" Source="{com:Icon Path=/Ark Server Manager;component/Art/FolderImport.ico,Size=32}" Width="16" VerticalAlignment="Center"/>
            <Label Content="{DynamicResource ServerSettings_ImportButtonLabel}" VerticalAlignment="Center"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="SaveButtonContent">
        <StackPanel Orientation="Horizontal" Height="27">
            <Image Margin="5,0,5,0" Source="{com:Icon Path=/Ark Server Manager;component/Art/Save.ico,Size=32}" Width="16" VerticalAlignment="Center"/>
            <Label Content="{DynamicResource ServerSettings_SaveButtonLabel}" VerticalAlignment="Center"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="StopButtonContent">
        <StackPanel Orientation="Horizontal" Height="27">
            <Image Margin="5,0,5,0" Source="{com:Icon Path=/Ark Server Manager;component/Art/Stop.ico,Size=32}" Width="16" VerticalAlignment="Center"/>
            <Label Content="{DynamicResource ServerSettings_StopButtonLabel}" VerticalAlignment="Center"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="StartButtonContent">
        <StackPanel Orientation="Horizontal" Height="27">
            <Image Margin="5,0,5,0" Source="{com:Icon Path=/Ark Server Manager;component/Art/Start.ico,Size=32}" Width="16" VerticalAlignment="Center"/>
            <Label Content="{DynamicResource ServerSettings_StartButtonLabel}" VerticalAlignment="Center"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="OpenRCONButtonContent">
        <StackPanel Orientation="Horizontal"  Height="27">
            <Image Margin="5,0,5,0" Source="{com:Icon Path=/Ark Server Manager;component/Art/Command.ico,Size=32}" Width="16" VerticalAlignment="Center"/>
            <Label Content="{DynamicResource ServerSettings_RCONButtonLabel}" VerticalAlignment="Center"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="PlayerListButtonContent">
        <StackPanel Orientation="Horizontal"  Height="27">
            <Image Margin="5,0,5,0" Source="{com:Icon Path=/Ark Server Manager;component/Art/Players.ico,Size=32}" Width="16" VerticalAlignment="Center"/>
            <Label Content="{DynamicResource ServerSettings_PlayerListButtonLabel}" VerticalAlignment="Center"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="ResetRCONButtonContent">
        <StackPanel Orientation="Horizontal" Height="20">
            <Image Margin="5,0,5,0" Source="{com:Icon Path=/Ark Server Manager;component/Art/Refresh.ico,Size=32}" Width="16" VerticalAlignment="Center"/>
            <Label Content="{DynamicResource ServerSettings_RCONButtonLabel}" VerticalAlignment="Center" Margin="0,-5,0,-5"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="UpgradeButtonContent">
        <StackPanel Orientation="Horizontal" Height="27">
            <Image Margin="5,0,5,0" Source="{com:Icon Path=/Ark Server Manager;component/Art/Download.ico,Size=32}" Width="16" VerticalAlignment="Center"/>
            <Label Content="{DynamicResource ServerSettings_UpgradeButtonLabel}" VerticalAlignment="Center"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="InstallButtonContent">
        <StackPanel Orientation="Horizontal" Height="27">
            <Image Margin="5,0,5,0" Source="{com:Icon Path=/Ark Server Manager;component/Art/Download.ico,Size=32}" Width="16" VerticalAlignment="Center"/>
            <Label Content="{DynamicResource ServerSettings_InstallButtonLabel}" VerticalAlignment="Center"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="CancelInstallButtonContent">
        <StackPanel Orientation="Horizontal" Height="27">
            <Image Margin="5,0,5,0" Source="{com:Icon Path=/Ark Server Manager;component/Art/Stop.ico,Size=32}" Width="16" VerticalAlignment="Center"/>
            <Label Content="{DynamicResource ServerSettings_CancelUpgradeButtonLabel}" VerticalAlignment="Center"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="LocationButtonContent"  Height="27">
        <StackPanel Orientation="Horizontal">
            <Label Content="{DynamicResource ServerSettings_SetLocationButtonLabel}" />
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="ShowCmdButtonContent">
        <StackPanel Orientation="Horizontal" Height="20">
            <Image Margin="5,0,5,0" Source="{com:Icon Path=/Ark Server Manager;component/Art/Command.ico,Size=32}" Width="16" VerticalAlignment="Center"/>
            <Label Content="{DynamicResource ServerSettings_ShowCommandButtonLabel}" VerticalAlignment="Center" Margin="0,-5,0,-5"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="CreateSymLinkButtonContent">
        <StackPanel Orientation="Horizontal" Height="20">
            <Image Margin="5,0,5,0" Source="{com:Icon Path=/Ark Server Manager;component/Art/Command.ico,Size=32}" Width="16" VerticalAlignment="Center"/>
            <Label Content="{DynamicResource ServerSettings_CreateSymbolicLinkButtonLabel}" VerticalAlignment="Center" Margin="0,-5,0,-5"/>
        </StackPanel>
    </ContentControl>

    <ContentControl x:Key="ShutdownButtonContent">
        <StackPanel Orientation="Horizontal">
            <Image Width="16" Height="16" Margin="5,0,5,0" Source="{com:Icon Path=/Ark Server Manager;component/Art/Stop.ico,Size=32}" VerticalAlignment="Center"/>
            <Label Content="{DynamicResource ShutdownWindow_ShutdownButtonLabel}" VerticalAlignment="Center" Padding="5,0"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="RestartButtonContent">
        <StackPanel Orientation="Horizontal">
            <Image Width="16" Height="16" Margin="5,0,5,0" Source="{com:Icon Path=/Ark Server Manager;component/Art/Start.ico,Size=32}" VerticalAlignment="Center"/>
            <Label Content="{DynamicResource ShutdownWindow_RestartButtonLabel}" VerticalAlignment="Center" Padding="5,0"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="CancelShutdownButtonContent">
        <StackPanel Orientation="Horizontal">
            <Image Width="16" Height="16" Margin="5,0,5,0" Source="{com:Icon Path=/Ark Server Manager;component/Art/Cancel.ico,Size=32}" VerticalAlignment="Center"/>
            <Label Content="{DynamicResource ShutdownWindow_CancelShutdownButtonLabel}" VerticalAlignment="Center" Padding="5,0"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="StopButtonContent2">
        <StackPanel Orientation="Horizontal">
            <Image Width="16" Height="16" Margin="5,0,5,0" Source="{com:Icon Path=/Ark Server Manager;component/Art/Stop.ico,Size=32}" VerticalAlignment="Center"/>
            <Label Content="{DynamicResource ShutdownWindow_StopButtonLabel}" VerticalAlignment="Center" Padding="5,0"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="CancelButtonContent">
        <StackPanel Orientation="Horizontal">
            <Label Content="{DynamicResource ShutdownWindow_CloseButtonLabel}" VerticalAlignment="Center" Padding="5,0"/>
        </StackPanel>
    </ContentControl>

    <ContentControl x:Key="DataDirectoryButtonContent">
        <StackPanel Orientation="Horizontal">
            <Label Content="{DynamicResource GlobalSettings_SetLocationButtonLabel}" VerticalAlignment="Center" Margin="0,-2,0,-2"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="DataDirectoryResetButtonContent">
        <StackPanel Orientation="Horizontal">
            <Label Content="{DynamicResource GlobalSettings_ResetButtonLabel}" VerticalAlignment="Center" Margin="0,-2,0,-2"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="BackupDirectoryButtonContent">
        <StackPanel Orientation="Horizontal">
            <Label Content="{DynamicResource GlobalSettings_SetLocationButtonLabel}" VerticalAlignment="Center" Margin="0,-2,0,-2"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="ClearButtonContent">
        <StackPanel Orientation="Horizontal">
            <Label Content="{DynamicResource GlobalSettings_ClearButtonLabel}" VerticalAlignment="Center" Margin="0,-2,0,-2"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="SteamAPIKeyButtonContent">
        <StackPanel Orientation="Horizontal">
            <Label Content="{DynamicResource GlobalSettings_SteamAPIKeyButtonLabel}" VerticalAlignment="Center" Margin="0,-2,0,-2"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="SteamAPIKeyHelpButtonContent">
        <StackPanel Orientation="Horizontal">
            <Label Content="{DynamicResource GlobalSettings_SteamAPIKeyHelpButtonLabel}" VerticalAlignment="Center" Margin="0,-2,0,-2"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="CacheDirectoryButtonContent">
        <StackPanel Orientation="Horizontal">
            <Label Content="{DynamicResource GlobalSettings_SetLocationButtonLabel}" VerticalAlignment="Center" Margin="0,-3,0,-3"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="DiscordBotApplyButtonContent">
        <StackPanel Orientation="Horizontal">
            <Label Content="{DynamicResource GlobalSettings_DiscordBotApplyButtonLabel}" VerticalAlignment="Center" Margin="0,-2,0,-2"/>
        </StackPanel>
    </ContentControl>
    <ContentControl x:Key="DiscordBotHelpButtonContent">
        <StackPanel Orientation="Horizontal">
            <Label Content="{DynamicResource GlobalSettings_DiscordBotHelpButtonLabel}" VerticalAlignment="Center" Margin="0,-2,0,-2"/>
        </StackPanel>
    </ContentControl>

</Globalization:StyleResourceDictionary>